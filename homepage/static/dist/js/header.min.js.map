{"version":3,"sources":["webpack://homepage/./homepage/static/src/ts/header.ts"],"names":["document","addEventListener","event","setup","preview","getElementById","element","camera","THREE","PerspectiveCamera","clientWidth","clientHeight","position","z","renderer","WebGLRenderer","antialias","alpha","setSize","prepend","domElement","textureLoader","TextureLoader","load","onWindowResize","depthTextureLoader","shaderMaterial","ShaderMaterial","uniforms","mouseX","value","mouseY","scrollOffset","texture","depthTexture","vertexShader","fragmentShader","scene","Scene","geometry","PlaneBufferGeometry","mesh","Mesh","onMouseMove","e","rect","getBoundingClientRect","x","Math","max","min","clientX","left","y","clientY","top","style","transform","window","requestAnimationFrame","render","aspect","updateProjectionMatrix","vFOV","degToRad","fov","maxHeight","tan","height","width","scale","set","updateDeviceWidth","documentElement","display","removeEventListener","add","threeIsLoaded","loadThreeAndSetupIfNeeded","script","createElement","setAttribute","onload","body","appendChild"],"mappings":"AAIAA,SAASC,iBAAiB,oBAAoB,SAASC,GACnD,SAASC,IACL,IAAMC,EAAUJ,SAASK,eAAe,wBAClCC,EAAUN,SAASK,eAAe,sBAElCE,EAAS,IAAIC,MAAMC,kBACrB,GAAIH,EAAQI,YAAcJ,EAAQK,aAAc,EAAG,KAEvDJ,EAAOK,SAASC,EAAI,IAEpB,IAAMC,EAAW,IAAIN,MAAMO,cAAc,CAAEC,WAAW,EAAMC,OAAO,IACnEH,EAASI,QAAQZ,EAAQI,YAAaJ,EAAQK,cAC9CL,EAAQa,QAAQL,EAASM,YAEzB,IA2BMC,GAAgB,IAAIb,MAAMc,eAC3BC,KAAK,+BAA+B,WACjCC,OAGFC,GAAqB,IAAIjB,MAAMc,eAChCC,KAAK,qCAAqC,WACvCC,OAGFE,EAAiB,IAAIlB,MAAMmB,eAAe,CAC5CC,SAAU,CACNC,OAAQ,CAACC,MAAO,GAChBC,OAAQ,CAACD,MAAO,GAChBE,aAAc,CAACF,MAAO,GACtBG,QAAS,CAACH,MAAOT,GACjBa,aAAc,CAACJ,MAAOL,IAE1BU,aA7CiB,2MA8CjBC,eAtCmB,0yBAyCjBC,EAAQ,IAAI7B,MAAM8B,MAClBC,EAAW,IAAI/B,MAAMgC,oBAAoB,EAAG,GAC5CC,EAAO,IAAIjC,MAAMkC,KAAKH,EAAUb,GAGtC,SAASiB,EAAYC,GACjB,IAAMC,EAAOvC,EAAQwC,wBACfC,EAAIC,KAAKC,KAAK,IAAKD,KAAKE,IAAI,IAAKN,EAAEO,QAAUN,EAAKO,OAClDC,EAAIL,KAAKC,KAAK,IAAKD,KAAKE,IAAI,IAAKN,EAAEU,QAAUT,EAAKU,MACxD7B,EAAeE,SAASC,OAAOC,OAASiB,EAAI,KAC5CrB,EAAeE,SAASG,OAAOD,MAAQuB,EAAI,KAC3C/C,EAAQkD,MAAMC,UAAY,qBAAqBV,EAAI,GAAE,OACrDW,OAAOC,uBAAsB,WACzB7C,EAAS8C,OAAOvB,EAAO9B,MAI/B,SAASiB,IACLjB,EAAOsD,OAASvD,EAAQI,YAAcJ,EAAQK,aAC9CJ,EAAOuD,yBAEP,IAAMC,EAAOvD,MAAMwC,KAAKgB,SAASzD,EAAO0D,KAClCC,EAAY,EAAIlB,KAAKmB,IAAIJ,EAAO,GAAKxD,EAAOK,SAASC,EAErDuD,EAASF,EACTG,EAFc,EAENH,EACdzB,EAAK6B,MAAMC,IAAIF,EAAOD,EAAQ,GAE9BtD,EAASI,QAAQZ,EAAQI,YAAaJ,EAAQK,cAC9C+C,OAAOC,uBAAsB,WACzB7C,EAAS8C,OAAOvB,EAAO9B,MAI/B,SAASiE,IACDxE,SAASyE,gBAAgB/D,YAAc,MACvCJ,EAAQkD,MAAMkB,QAAU,OACxBtE,EAAQoD,MAAMkB,QAAU,QACxBhB,OAAOiB,oBAAoB,SAAUnD,GAAgB,GACrDxB,SAAS2E,oBAAoB,YAAahC,GAAa,KAEvDvC,EAAQoD,MAAMkB,QAAU,OACxBpE,EAAQkD,MAAMkB,QAAU,QACxBlD,IACAkC,OAAOzD,iBAAiB,SAAUuB,GAAgB,GAClDxB,SAASC,iBAAiB,YAAa0C,GAAa,IA1C5DN,EAAMuC,IAAInC,GA8CV+B,IACAd,OAAOzD,iBAAiB,SAAUuE,GAAmB,GAGzD,IAAIK,GAAgB,EAEpB,SAASC,IACL,KAAI9E,SAASyE,gBAAgB/D,YAAc,MACvCmE,GAAJ,CACA,IAAME,EAAS/E,SAASgF,cAAc,UACtCD,EAAOE,aAAa,MAAO,kCAC3BF,EAAOG,OAAS/E,EAChBH,SAASmF,KAAKC,YAAYL,GAC1BF,GAAgB,GAGpBC,IACApB,OAAOzD,iBAAiB,SAAU6E,GAA2B","file":"js/header.min.js","sourcesContent":["// THREE is loaded asynchronously, only on non-mobile devices\n// therefore, don't import the THREE modules and mock the THREE import\ndeclare var THREE: any\n\ndocument.addEventListener(\"DOMContentLoaded\", function(event) {\n    function setup() {\n        const preview = document.getElementById('profile-icon-preview');\n        const element = document.getElementById('profile-icon-webgl');\n\n        const camera = new THREE.PerspectiveCamera(\n            45, element.clientWidth / element.clientHeight, 1, 1000\n        );\n        camera.position.z = 200;\n\n        const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\n        renderer.setSize(element.clientWidth, element.clientHeight);\n        element.prepend(renderer.domElement);\n\n        const vertexShader = `\n            varying vec2 vUv;\n            void main()\t{\n                vUv = uv;\n                gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n            }\n        `;\n\n        const fragmentShader = `\n            #extension GL_OES_standard_derivatives : enable\n            varying vec2 vUv;\n            uniform float mouseX;\n            uniform float mouseY;\n            uniform float scrollOffset;\n            uniform sampler2D depthTexture;\n            uniform sampler2D texture;\n            void main() {\n                vec2 vMouse = vec2(mouseX, mouseY);\n                vec2 vScrollOffset = vec2(0, scrollOffset);\n                float depth = texture2D(depthTexture, vUv).r;\n                gl_FragColor = texture2D(texture, vUv + vMouse * (depth) + vScrollOffset);\n                // Do some edge anti aliasing, because the image contains\n                // a premultiplied alpha channel\n                gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;\n            }\n        `;\n\n        const textureLoader = new THREE.TextureLoader()\n            .load('/static/img/ausschnitt.webp', function() {\n                onWindowResize();\n            });\n\n        const depthTextureLoader = new THREE.TextureLoader()\n            .load('/static/img/ausschnitt-depth.webp', function() {\n                onWindowResize();\n            });\n\n        const shaderMaterial = new THREE.ShaderMaterial({\n            uniforms: {\n                mouseX: {value: 0},\n                mouseY: {value: 0},\n                scrollOffset: {value: 0},\n                texture: {value: textureLoader},\n                depthTexture: {value: depthTextureLoader},\n            },\n            vertexShader,\n            fragmentShader\n        });\n\n        const scene = new THREE.Scene();\n        const geometry = new THREE.PlaneBufferGeometry(1, 1);\n        const mesh = new THREE.Mesh(geometry, shaderMaterial);\n        scene.add(mesh);\n\n        function onMouseMove(e: MouseEvent) {\n            const rect = element.getBoundingClientRect();\n            const x = Math.max(-500, Math.min(500, e.clientX - rect.left));\n            const y = Math.max(-500, Math.min(500, e.clientY - rect.top));\n            shaderMaterial.uniforms.mouseX.value = -x / 15000;\n            shaderMaterial.uniforms.mouseY.value = y / 15000;\n            element.style.transform = `rotate3d(0, 1, 1, ${x / 50}deg)`;\n            window.requestAnimationFrame(function() {\n                renderer.render(scene, camera);\n            });\n        }\n\n        function onWindowResize() {\n            camera.aspect = element.clientWidth / element.clientHeight;\n            camera.updateProjectionMatrix();\n\n            const vFOV = THREE.Math.degToRad(camera.fov);\n            const maxHeight = 2 * Math.tan(vFOV / 2) * camera.position.z;\n            const imageAspect = 600 / 600;\n            const height = maxHeight;\n            const width = maxHeight * imageAspect;\n            mesh.scale.set(width, height, 1);\n\n            renderer.setSize(element.clientWidth, element.clientHeight);\n            window.requestAnimationFrame(function() {\n                renderer.render(scene, camera);\n            });\n        }\n\n        function updateDeviceWidth() {\n            if (document.documentElement.clientWidth < 1023) {\n                element.style.display = 'none';\n                preview.style.display = 'block';\n                window.removeEventListener('resize', onWindowResize, true);\n                document.removeEventListener('mousemove', onMouseMove, true);\n            } else {\n                preview.style.display = 'none';\n                element.style.display = 'block';\n                onWindowResize();\n                window.addEventListener('resize', onWindowResize, true);\n                document.addEventListener('mousemove', onMouseMove, true);\n            }\n        }\n\n        updateDeviceWidth();\n        window.addEventListener('resize', updateDeviceWidth, false);\n    }\n\n    let threeIsLoaded = false;\n\n    function loadThreeAndSetupIfNeeded() {\n        if (document.documentElement.clientWidth < 1023) return;\n        if (threeIsLoaded) return;\n        const script = document.createElement('script');\n        script.setAttribute('src', '/static/vendor/js/three.min.js');\n        script.onload = setup;\n        document.body.appendChild(script);\n        threeIsLoaded = true;\n    }\n\n    loadThreeAndSetupIfNeeded();\n    window.addEventListener('resize', loadThreeAndSetupIfNeeded, false);\n});\n"],"sourceRoot":""}