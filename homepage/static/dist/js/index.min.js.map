{"version":3,"sources":["webpack://homepage/./homepage/static/src/ts/index/navigation.ts","webpack://homepage/./homepage/static/src/ts/index/header/loader.ts","webpack://homepage/./homepage/static/src/ts/index/header/image.ts","webpack://homepage/./homepage/static/src/ts/index/header/header.ts"],"names":["document","addEventListener","$navbarBurgers","Array","prototype","slice","call","querySelectorAll","length","forEach","el","target","dataset","$target","getElementById","classList","toggle","threeLink","this","load","Promise","resolve","reject","id","getAttribute","undefined","Error","href","threeElement","createElement","onload","src","parentNode","insertBefore","nextSibling","imageElement","loadTextureBehindAttribute","attribute","textureLoader","THREE","TextureLoader","loadCubemapBehindAttribute","CubeTextureLoader","setPath","parallaxScene","width","clientWidth","height","clientHeight","camera","PerspectiveCamera","position","z","diffuseTextureLoader","depthTextureLoader","cubemapTextureLoader","renderer","WebGLRenderer","antialias","alpha","setSize","canvas","domElement","fetch","text","fragmentShader","vertexShader","shaderMaterial","ShaderMaterial","uniforms","mouseX","value","mouseY","scrollOffset","imageTexture","depthTexture","cubemapTexture","scene","Scene","geometry","PlaneGeometry","mesh","Mesh","add","ParallaxScene","show","hide","image","lastOrientation","requestAnimationFrame","window","render","updateViewportAspectRatio","aspect","naturalWidth","naturalHeight","updateProjectionMatrix","vFOV","MathUtils","degToRad","fov","maxHeight","Math","tan","scale","set","reactToMouseMove","event","rect","getBoundingClientRect","x","clientX","left","y","clientY","top","reactToTouchMove","touches","reactToScroll","min","max","scrollY","innerHeight","style","display","bind","removeEventListener","querySelector","threeLoader","ThreeLoader","parallaxImageElements","parallaxImages","from","map","element","ParallaxImage","updateWindowDimensions","parallaxImage"],"mappings":"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","file":"index.min.js","sourcesContent":["document.addEventListener('DOMContentLoaded', () => {\n  // Get all \"navbar-burger\" elements\n  const $navbarBurgers = Array.prototype.slice.call(document.querySelectorAll('.navbar-burger'), 0)\n\n  // Check if there are any navbar burgers\n  if ($navbarBurgers.length > 0) {\n\n    // Add a click event on each of them\n    $navbarBurgers.forEach((el: any) => {\n      el.addEventListener('click', () => {\n\n        // Get the target from the \"data-target\" attribute\n        const target = el.dataset.target\n        const $target = document.getElementById(target)\n\n        // Toggle the \"is-active\" class on both the \"navbar-burger\" and the \"navbar-menu\"\n        el.classList.toggle('is-active')\n        $target.classList.toggle('is-active')\n\n      })\n    })\n  }\n})\n","/**\n * A lazy loader for the THREE.js script.\n *\n * Usage:\n *\n * ```typescript\n * const linkElement = <HTMLLinkElement>document\n *     .querySelector('link[rel=\"parallax-three-js\"]')\n * // TODO: Check if linkElement actually exists\n * const loader = new ThreeLoader(linkElement)\n *     .load(() => {\n *         // Do something on load\n *     })\n * ```\n */\nexport class ThreeLoader {\n    private threeLink: HTMLLinkElement\n\n    public constructor(threeLink: HTMLLinkElement) {\n        this.threeLink = threeLink\n    }\n\n    /**\n     * Load THREE.js into a script element.\n     *\n     * The script element is placed below the given link element.\n     * See index.ts for a usage example.\n     */\n    public async load(): Promise<HTMLScriptElement> {\n        return new Promise((resolve, reject) => {\n            const id = this.threeLink.getAttribute('data-id')\n            if (id === undefined) {\n                reject(new Error(\n                    'The link element has to supply a data-id attribute!'\n                ))\n            }\n\n            const href = this.threeLink.getAttribute('href')\n            if (href === undefined) {\n                reject(new Error(\n                    'The link element has to supply a href attribute!'\n                ))\n            }\n\n            // Check if there is already a THREE.js script element.\n            let threeElement = <HTMLScriptElement>\n                document.getElementById(id)\n            if (threeElement !== null) {\n                resolve(threeElement)\n                return\n            }\n\n            // If not, create a new one.\n            threeElement = document.createElement('script')\n            threeElement.onload = () => {\n                resolve(threeElement)\n            }\n            threeElement.id = id\n            threeElement.src = href\n            // Insert THREE.js after the link element.\n            this.threeLink.parentNode.insertBefore(\n                threeElement, this.threeLink.nextSibling\n            )\n        })\n    }\n}\n","/**\n * The lazily imported THREE.js library.\n *\n * THREE is loaded lazily and only on devices exceeding a given\n * maximum width. It will not be included as a module to reduce the\n * file size of this script.\n */\ndeclare var THREE: any\n\n/**\n * A parallax image, driven by THREE.js.\n */\nexport class ParallaxImage {\n    imageElement: HTMLImageElement\n\n    parallaxScene?: ParallaxScene\n\n    public constructor(imageElement: HTMLImageElement) {\n        this.imageElement = imageElement\n    }\n\n    public async loadTextureBehindAttribute(attribute: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            const src = this.imageElement.getAttribute(attribute)\n            if (src === null) {\n                reject(new Error(`\n                    The image element must include\n                    an attribute \"${attribute}\"!\n                `))\n                return\n            }\n            const textureLoader = new THREE.TextureLoader()\n                .load(src, () => {\n                    resolve(textureLoader)\n                })\n        })\n    }\n\n    public async loadCubemapBehindAttribute(attribute: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            const src = this.imageElement.getAttribute(attribute)\n            if (src === null) {\n                reject(new Error(`\n                    The image element must include\n                    an attribute \"${attribute}\"!\n                `))\n                return\n            }\n            const textureLoader = new THREE.CubeTextureLoader()\n                .setPath(src)\n                // Use: https://matheowis.github.io/HDRI-to-CubeMap/\n                // to convert an HDRI to a cubemap\n                .load([\n                    \"px.png\",\n                    \"nx.png\",\n                    \"py.png\",\n                    \"ny.png\",\n                    \"pz.png\",\n                    \"nz.png\"\n                ], () => {\n                    resolve(textureLoader)\n                })\n        })\n    }\n\n    public async load() {\n        if (this.parallaxScene !== undefined) {\n            return\n        }\n\n        const width = this.imageElement.clientWidth\n        const height = this.imageElement.clientHeight\n        const camera = new THREE.PerspectiveCamera(\n            45, width / height, 1, 1000\n        )\n        camera.position.z = 200\n        const diffuseTextureLoader = await this\n            .loadTextureBehindAttribute('src')\n        const depthTextureLoader = await this\n            .loadTextureBehindAttribute('data-parallax-depth-map')\n        const cubemapTextureLoader = await this\n            .loadCubemapBehindAttribute('data-parallax-cubemap-path')\n        const renderer = new THREE.WebGLRenderer({\n            antialias: false,\n            alpha: false\n        })\n        renderer.setSize(width, height)\n        const canvas = renderer.domElement\n\n        // Load the fragment and vertex shader\n        const fragmentShader = await (await fetch('/static/src/ts/index/header/shaders/frag.glsl')).text()\n        const vertexShader = await (await fetch('/static/src/ts/index/header/shaders/vert.glsl')).text()\n\n        const shaderMaterial = new THREE.ShaderMaterial({\n            uniforms: {\n                mouseX: {value: 0},\n                mouseY: {value: 0},\n                scrollOffset: {value: 0},\n                imageTexture: {value: diffuseTextureLoader},\n                depthTexture: {value: depthTextureLoader},\n                cubemapTexture: {value: cubemapTextureLoader}\n            },\n            vertexShader,\n            fragmentShader\n        })\n        const scene = new THREE.Scene()\n        const geometry = new THREE.PlaneGeometry(1, 1)\n        const mesh = new THREE.Mesh(geometry, shaderMaterial)\n        scene.add(mesh)\n\n        this.parallaxScene = new ParallaxScene(\n            this.imageElement,\n            canvas,\n            camera,\n            renderer,\n            diffuseTextureLoader,\n            depthTextureLoader,\n            shaderMaterial,\n            scene,\n            geometry,\n            mesh\n        )\n        return\n    }\n\n    public show(): void {\n        this.parallaxScene?.show()\n    }\n\n    public hide(): void {\n        this.parallaxScene?.hide()\n    }\n}\n\n\n/**\n * A parallax scene, driven by THREE.js.\n */\nclass ParallaxScene {\n    image: HTMLImageElement\n    canvas: HTMLCanvasElement\n    camera: any\n    renderer: any\n    diffuseTextureLoader: any\n    depthTextureLoader: any\n    shaderMaterial: any\n    scene: any\n    geometry: any\n    mesh: any\n\n    lastOrientation: DeviceOrientationEvent | null = null\n\n    public constructor(\n        image: HTMLImageElement,\n        canvas: HTMLCanvasElement,\n        camera: any,\n        renderer: any,\n        diffuseTextureLoader: any,\n        depthTextureLoader: any,\n        shaderMaterial: any,\n        scene: any,\n        geometry: any,\n        mesh: any\n    ) {\n        this.image = image\n        this.canvas = canvas\n        this.camera = camera\n        this.renderer = renderer\n        this.diffuseTextureLoader = diffuseTextureLoader\n        this.depthTextureLoader = depthTextureLoader\n        this.shaderMaterial = shaderMaterial\n        this.scene = scene\n        this.geometry = geometry\n        this.mesh = mesh\n    }\n\n    private requestAnimationFrame(): void {\n        window.requestAnimationFrame(() => {\n            this.renderer.render(this.scene, this.camera)\n        })\n    }\n\n    private updateViewportAspectRatio(): void {\n        this.camera.aspect =\n            this.image.naturalWidth / this.image.naturalHeight\n        this.camera.updateProjectionMatrix()\n        const vFOV = THREE.MathUtils.degToRad(this.camera.fov)\n        const maxHeight = 2 * Math.tan(vFOV / 2) * this.camera.position.z\n        const imageAspect =\n            this.image.naturalHeight / this.image.naturalWidth\n        const height = maxHeight\n        const width = maxHeight * imageAspect\n        this.mesh.scale.set(width, height, 1)\n        this.requestAnimationFrame()\n    }\n\n    private reactToMouseMove(event: MouseEvent): void {\n        const rect = this.canvas.getBoundingClientRect()\n        const x = (event.clientX - rect.left) / rect.width\n        const y = (event.clientY - rect.top) / rect.height\n        this.shaderMaterial.uniforms.mouseX.value = x\n        this.shaderMaterial.uniforms.mouseY.value = y\n        this.requestAnimationFrame()\n    }\n\n    private reactToTouchMove(event: TouchEvent): void {\n        const rect = this.canvas.getBoundingClientRect()\n        const x = (event.touches[0].clientX - rect.left) / rect.width\n        const y = (event.touches[0].clientY - rect.top) / rect.height\n        this.shaderMaterial.uniforms.mouseX.value = x\n        this.shaderMaterial.uniforms.mouseY.value = y\n        this.requestAnimationFrame()\n    }\n\n    private reactToScroll(): void {\n        const scrollOffset = Math.min(Math.max(0.5 * (window.scrollY / window.innerHeight), 0), 0.1)\n        this.shaderMaterial.uniforms.scrollOffset.value = scrollOffset\n        this.requestAnimationFrame()\n    }\n\n    public show(): void {\n        this.canvas.style.display = 'inline-block'\n        this.image.style.display = 'none'\n        if (this.canvas.parentNode === null) {\n            this.image.parentNode.insertBefore(\n                this.canvas, this.image.nextSibling\n            )\n            this.renderer.setSize(\n                this.canvas.clientWidth,\n                this.canvas.clientHeight\n            )\n        }\n        window.addEventListener(\n            'resize',\n            this.updateViewportAspectRatio.bind(this),\n            true\n        )\n        document.addEventListener(\n            'mousemove',\n            this.reactToMouseMove.bind(this),\n            true\n        )\n        document.addEventListener(\n            'touchmove',\n            this.reactToTouchMove.bind(this),\n            true\n        )\n        window.addEventListener(\n            'scroll', \n            this.reactToScroll.bind(this),\n            true\n        );\n        this.updateViewportAspectRatio()\n        this.requestAnimationFrame()\n    }\n\n    public hide(): void {\n        this.image.style.display = 'inline-block'\n        this.canvas.style.display = 'none'\n        window.removeEventListener(\n            'resize',\n            this.updateViewportAspectRatio.bind(this),\n            true\n        )\n        document.removeEventListener(\n            'mousemove',\n            this.reactToMouseMove.bind(this),\n            true\n        )\n        document.removeEventListener(\n            'touchmove',\n            this.reactToTouchMove.bind(this),\n            true\n        )\n        window.removeEventListener(\n            'scroll',\n            this.reactToScroll.bind(this),\n            true\n        )\n    }\n}\n","/**\n * Author: Philipp Matthes\n *\n * This module is used for a parallax effect on images.\n *\n * It uses THREE.js (https://threejs.org/) on a canvas\n * together with an image and a depth map to apply\n * parallax occlusion mapping, similar to the\n * 3Dify app (https://github.com/3dify-app).\n *\n * Usage:\n *\n * ```html\n * <!-- Somewhere in your html --!>\n * <img ... src=\"path/to/preview.webp\"\n *          class=\"parallax\"\n *          data-parallax-depth-map=\"path/to/preview-depth.webp\">\n * <!-- Preferably at the bottom of your body element --!>\n * <link rel=\"parallax-three-js\"\n *       href=\"path/to/three.min.js\"\n *       data-id=\"id-of-the-lazyloaded-three-script-element\">\n * <!-- THREE.js will be loaded lazily to this location --!>\n * ```\n *\n * Notes:\n * - The srcset attribute is not supported.\n * - The image element gets lazily replaced (only on devices\n * wider than 1023 pixels) by a canvas which will render a\n * THREE.js parallax scene with the given depth map.\n * - THREE.js and the parallax effect is only loaded, when the\n * screen exceeds mobile device width of 1023 pixels. This also\n * applies to screen resizing events and not only the initial\n * page load.\n */\n\n\nimport { ThreeLoader } from './loader'\nimport { ParallaxImage } from './image'\n\n\ndocument.addEventListener('DOMContentLoaded', async () => {\n    const threeLink = <HTMLLinkElement>document\n        .querySelector('link[rel=\"parallax-three-js\"]')\n\n    const threeLoader = new ThreeLoader(threeLink)\n    const parallaxImageElements = document\n        .querySelectorAll<HTMLImageElement>('img.parallax')\n    const parallaxImages = Array.from(parallaxImageElements)\n        .map((element) => new ParallaxImage(element))\n\n    const updateWindowDimensions = async () => {\n        await threeLoader.load()\n        for (let parallaxImage of parallaxImages) {\n            await parallaxImage.load()\n            parallaxImage.show()\n        }\n    }\n\n    await updateWindowDimensions()\n    window.addEventListener('resize', updateWindowDimensions, false)\n})\n\n"],"sourceRoot":""}