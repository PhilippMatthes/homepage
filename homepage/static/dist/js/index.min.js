(()=>{"use strict";var e=function(){function e(e){this.threeLink=e}return e.prototype.load=function(){return e=this,t=void 0,r=function(){var e=this;return function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}}(this,(function(t){return[2,new Promise((function(t,n){var r=e.threeLink.getAttribute("data-id");void 0===r&&n(new Error("The link element has to supply a data-id attribute!"));var i=e.threeLink.getAttribute("href");void 0===i&&n(new Error("The link element has to supply a href attribute!"));var o=document.getElementById(r);null===o?((o=document.createElement("script")).onload=function(){t(o)},o.id=r,o.src=i,e.threeLink.parentNode.insertBefore(o,e.threeLink.nextSibling)):t(o)}))]}))},new((n=void 0)||(n=Promise))((function(i,o){function a(e){try{s(r.next(e))}catch(e){o(e)}}function l(e){try{s(r.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,l)}s((r=r.apply(e,t||[])).next())}));var e,t,n,r},e}(),t=function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{s(r.next(e))}catch(e){o(e)}}function l(e){try{s(r.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,l)}s((r=r.apply(e,t||[])).next())}))},n=function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}},r=function(){function e(e){this.imageElement=e}return e.prototype.loadTextureBehindAttribute=function(e){return t(this,void 0,void 0,(function(){var t=this;return n(this,(function(n){return[2,new Promise((function(n,r){var i=t.imageElement.getAttribute(e);if(null!==i)var o=(new THREE.TextureLoader).load(i,(function(){console.log("Loaded image resource "+i),n(o)}));else r(new Error('\n                    The image element must include\n                    an attribute "'+e+'"!\n                '))}))]}))}))},e.prototype.load=function(){return t(this,void 0,void 0,(function(){var e,t,r,o,a,l,s,u,c,h,d;return n(this,(function(n){switch(n.label){case 0:return void 0!==this.parallaxScene?[2]:(e=this.imageElement.clientWidth,t=this.imageElement.clientHeight,(r=new THREE.PerspectiveCamera(45,e/t,1,1e3)).position.z=200,[4,this.loadTextureBehindAttribute("src")]);case 1:return o=n.sent(),[4,this.loadTextureBehindAttribute("data-parallax-depth-map")];case 2:return a=n.sent(),(l=new THREE.WebGLRenderer({antialias:!0,alpha:!0})).setSize(e,t),s=l.domElement,u=new THREE.ShaderMaterial({uniforms:{mouseX:{value:0},mouseY:{value:0},scrollOffset:{value:0},texture:{value:o},depthTexture:{value:a}},vertexShader:"\n    varying vec2 vUv;\n\n    void main()\t{\n        vUv = uv;\n        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n    }\n",fragmentShader:"\n    #extension GL_OES_standard_derivatives : enable\n    varying vec2 vUv;\n    uniform float mouseX;\n    uniform float mouseY;\n    uniform float scrollOffset;\n    uniform sampler2D depthTexture;\n    uniform sampler2D texture;\n    void main() {\n        vec2 vMouse = vec2(mouseX, mouseY);\n        vec2 vScrollOffset = vec2(0, scrollOffset);\n        float depth = texture2D(depthTexture, vUv).r;\n        gl_FragColor = texture2D(\n            texture, vUv + vMouse * (depth) + vScrollOffset\n        );\n        // Do some edge anti aliasing, because the image\n        // may contain a premultiplied alpha channel.\n        gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;\n    }\n"}),c=new THREE.Scene,h=new THREE.PlaneBufferGeometry(1,1),d=new THREE.Mesh(h,u),c.add(d),this.parallaxScene=new i(this.imageElement,s,r,l,o,a,u,c,h,d),[2]}}))}))},e.prototype.show=function(){var e;null===(e=this.parallaxScene)||void 0===e||e.show()},e.prototype.hide=function(){var e;null===(e=this.parallaxScene)||void 0===e||e.hide()},e}(),i=function(){function e(e,t,n,r,i,o,a,l,s,u){this.image=e,this.canvas=t,this.camera=n,this.renderer=r,this.diffuseTextureLoader=i,this.depthTextureLoader=o,this.shaderMaterial=a,this.scene=l,this.geometry=s,this.mesh=u}return e.prototype.requestAnimationFrame=function(){var e=this;window.requestAnimationFrame((function(){e.renderer.render(e.scene,e.camera)}))},e.prototype.updateViewportAspectRatio=function(){this.camera.aspect=this.image.naturalWidth/this.image.naturalHeight,this.camera.updateProjectionMatrix();var e=THREE.Math.degToRad(this.camera.fov),t=2*Math.tan(e/2)*this.camera.position.z,n=t,r=t*(this.image.naturalHeight/this.image.naturalWidth);this.mesh.scale.set(r,n,1),this.requestAnimationFrame()},e.prototype.reactToMouseMove=function(e){var t=this.canvas.getBoundingClientRect(),n=Math.max(-500,Math.min(500,e.clientX-t.left)),r=Math.max(-500,Math.min(500,e.clientY-t.top));this.shaderMaterial.uniforms.mouseX.value=-n/15e3,this.shaderMaterial.uniforms.mouseY.value=r/15e3,this.canvas.style.transform="rotate3d(0, 1, 1, "+n/50+"deg)",this.requestAnimationFrame()},e.prototype.show=function(){this.canvas.style.display="block",this.image.style.display="none",null===this.canvas.parentNode&&(this.image.parentNode.insertBefore(this.canvas,this.image.nextSibling),this.renderer.setSize(this.canvas.clientWidth,this.canvas.clientHeight)),window.addEventListener("resize",this.updateViewportAspectRatio.bind(this),!0),document.addEventListener("mousemove",this.reactToMouseMove.bind(this),!0),this.updateViewportAspectRatio(),this.requestAnimationFrame()},e.prototype.hide=function(){this.image.style.display="block",this.canvas.style.display="none",window.removeEventListener("resize",this.updateViewportAspectRatio.bind(this),!0),document.removeEventListener("mousemove",this.reactToMouseMove.bind(this),!0)},e}(),o=function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{s(r.next(e))}catch(e){o(e)}}function l(e){try{s(r.throw(e))}catch(e){o(e)}}function s(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,l)}s((r=r.apply(e,t||[])).next())}))},a=function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function l(o){return function(l){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,l])}}};document.addEventListener("DOMContentLoaded",(function(){return o(void 0,void 0,void 0,(function(){var t,n,i,l,s;return a(this,(function(u){switch(u.label){case 0:return t=document.querySelector('link[rel="parallax-three-js"]'),n=new e(t),i=document.querySelectorAll("img.parallax"),l=Array.from(i).map((function(e){return new r(e)})),[4,(s=function(){return o(void 0,void 0,void 0,(function(){var e,t,r,i,o;return a(this,(function(a){switch(a.label){case 0:if(!(document.documentElement.clientWidth<1023))return[3,1];for(e=0,t=l;e<t.length;e++)o=t[e],console.log("Hiding parallax image..."),o.hide();return[3,6];case 1:return console.log("Loading THREE.js..."),[4,n.load()];case 2:a.sent(),r=0,i=l,a.label=3;case 3:return r<i.length?(o=i[r],console.log("Loading parallax image..."),[4,o.load()]):[3,6];case 4:a.sent(),console.log("Showing parallax image..."),o.show(),a.label=5;case 5:return r++,[3,3];case 6:return[2]}}))}))})()];case 1:return u.sent(),window.addEventListener("resize",s,!1),[2]}}))}))}))})(),document.addEventListener("DOMContentLoaded",(function(e){var t=document.getElementById("macbook-container"),n=document.getElementById("macbook-code-container"),r=document.getElementById("peerbridge-animation-preview"),i=document.getElementById("peerbridge-animation"),o=i.getContext("2d"),a=i.width*(2541/2225);i.height=a;var l=new Image;function s(e){return"/static/img/peerbridge-animation/animation-1000_"+e+".webp"}l.onload=function(){o.clearRect(0,0,i.width,i.height),o.drawImage(l,0,0,l.width,l.height,0,0,i.width,i.height)};var u=!1;function c(){var e=i.getBoundingClientRect(),t=1-(e.y+window.innerHeight)/(e.height+window.innerHeight);if(!(t>1||t<0)){if(!u){for(var n=function(e){new Promise((function(t){var n=new Image;n.onload=t,n.onerror=t,n.src=s(e)}))},r=38;r<=120;r++)n(r);u=!0}var o=38+Math.round(82*t);l.src=s(o)}}function h(){var e=t.getBoundingClientRect(),r=1-(e.y+window.innerHeight)/(e.height+window.innerHeight);r>1||r<0||(n.scrollTop=1e3*r)}function d(){document.documentElement.clientWidth<1023?(i.style.display="none",r.style.display="block",window.removeEventListener("scroll",c,!0),window.removeEventListener("scroll",h,!0)):(r.style.display="none",i.style.display="block",c(),window.addEventListener("scroll",c,!0),h(),window.addEventListener("scroll",h,!0))}d(),window.addEventListener("resize",d,!1)}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,