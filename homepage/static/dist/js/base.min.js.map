{"version":3,"sources":["webpack://homepage/./homepage/static/src/ts/base/hook.ts","webpack://homepage/./homepage/static/src/ts/base/navbar.ts","webpack://homepage/webpack/bootstrap","webpack://homepage/webpack/runtime/define property getters","webpack://homepage/webpack/runtime/hasOwnProperty shorthand","webpack://homepage/webpack/startup"],"names":["value","this","isInside","element","onEnter","onProgressChangeInside","onLeave","progress","undefined","isAttached","updatePosition","newProgress","calculateProgress","attach","document","addEventListener","bind","window","detach","removeEventListener","scrollTop","scrollY","elementHeight","offsetHeight","elementTop","getBoundingClientRect","top","windowHeight","innerHeight","Progress","Hook","SectionHook","ParallaxHook","getElementById","querySelectorAll","forEach","navbarElement","referredId","getAttribute","referredElement","classList","add","remove","__webpack_module_cache__","__webpack_require__","moduleId","exports","module","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call"],"mappings":"0YAGA,aAGI,WAAmBA,GACfC,KAAKD,MAAQA,EAUrB,OAHW,YAAAE,SAAP,WACI,OAAOD,KAAKD,OAAS,GAAKC,KAAKD,OAAS,GAEhD,EAdA,GA+CA,aAUI,WACIG,EACAC,EACAC,EACAC,GAEAL,KAAKE,QAAUA,EAEfF,KAAKG,QAAUA,EACfH,KAAKI,uBAAyBA,EAC9BJ,KAAKK,QAAUA,EAEfL,KAAKM,cAAWC,EAChBP,KAAKQ,YAAa,EA8D1B,OArDY,YAAAC,eAAR,WACI,IAAMC,EAAcV,KAAKW,yBACHJ,IAAlBP,KAAKM,SACDI,EAAYT,YAGZD,KAAKG,WAGLH,KAAKM,SAAUL,aAAeS,EAAYT,YAG1CD,KAAKK,WAEJL,KAAKM,SAAUL,YAAcS,EAAYT,YAG1CD,KAAKG,WAGTO,EAAYT,YACZD,KAAKI,uBAAuBM,GAEhCV,KAAKM,SAAWI,GAMb,YAAAE,OAAP,WACOZ,KAAKQ,aACRK,SAASC,iBACL,SAAUd,KAAKS,eAAeM,KAAKf,OAAO,GAE9CgB,OAAOF,iBACH,SAAUd,KAAKS,eAAeM,KAAKf,OAAO,GAE9CA,KAAKQ,YAAa,IAMf,YAAAS,OAAP,WACSjB,KAAKQ,aACVK,SAASK,oBACL,SAAUlB,KAAKS,eAAeM,KAAKf,OAAO,GAE9CgB,OAAOE,oBACH,SAAUlB,KAAKS,eAAeM,KAAKf,OAAO,GAE9CA,KAAKQ,YAAa,IAE1B,EArFA,GA4FA,2B,+CAWA,OAXiC,OACtB,YAAAG,kBAAP,WACI,IAAMQ,EAAYH,OAAOI,QACnBC,EAAgBrB,KAAKE,QAAQoB,aAC7BC,EAAavB,KAAKE,QAAQsB,wBAAwBC,IAAMN,EACxDO,EAAeV,OAAOW,YAI5B,OAAO,IAAIC,GAHaT,EAAYO,EAEbH,GAAcF,IAG7C,EAXA,CAAiCQ,GAahCb,OAAec,YAAcA,EAQ9B,+B,+CAWA,OAXkC,OACvB,YAAAnB,kBAAP,WACI,IAAMQ,EAAYH,OAAOI,QACnBC,EAAgBrB,KAAKE,QAAQoB,aAC7BC,EAAavB,KAAKE,QAAQsB,wBAAwBC,IAAMN,EACxDO,EAAeV,OAAOW,YAI5B,OAAO,IAAIC,GAHaT,EAAYO,EAEbH,IAAeF,EAAgBK,KAG9D,EAXA,CAAkCG,GAajCb,OAAee,aAAeA,G,2BCvK/BlB,SAASC,iBAAiB,oBAAoB,kB,OAAA,E,OAAA,E,EAAA,W,qkCACAD,SACrCmB,eAAe,qBAEfC,iBAAoC,UAC1BC,SAAQ,SAACC,GACpB,IAAMC,EAAaD,EAAcE,aAAa,gBACxCC,EAAkBzB,SAASmB,eAAeI,GAChD,IAAI,KACAE,GACA,WACIH,EAAcI,UAAUC,IAAI,aAEhC,eACA,WACIL,EAAcI,UAAUE,OAAO,aAErC7B,Y,oBAjBoC,K,mRCR1C8B,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,GAAGF,EAAyBE,GAC3B,OAAOF,EAAyBE,GAAUC,QAG3C,IAAIC,EAASJ,EAAyBE,GAAY,CAGjDC,QAAS,IAOV,OAHAE,EAAoBH,GAAUE,EAAQA,EAAOD,QAASF,GAG/CG,EAAOD,QCnBfF,EAAoBK,EAAI,CAACH,EAASI,KACjC,IAAI,IAAIC,KAAOD,EACXN,EAAoBQ,EAAEF,EAAYC,KAASP,EAAoBQ,EAAEN,EAASK,IAC5EE,OAAOC,eAAeR,EAASK,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,MCJ3EP,EAAoBQ,EAAI,CAACK,EAAKC,IAASL,OAAOM,UAAUC,eAAeC,KAAKJ,EAAKC,GCEjFd,EAAoB,KAEpBA,EAAoB,M","file":"base.min.js","sourcesContent":["/**\n * A progress for element hooks.\n */\nexport class Progress {\n    value: number\n\n    public constructor(value: number) {\n        this.value = value\n    }\n\n    /**\n     * Determine whether a hooked element is\n     * currently inside the viewport.\n     */\n    public isInside(): boolean {\n        return this.value >= 0 && this.value <= 1\n    }\n}\n\n\n/**\n * Apply a hook on an html element which notifies the\n * event listener of the current scroll progress.\n *\n * There are three dispatched events:\n * `onProgressChange`, `onEnter` and `onLeave`.\n * `onEnter` is dispatched when the user resizes or scrolls\n * the document such that the element is in view. `onLeave`\n * is dispatched vice versa, when the element leaves the\n * viewport. Additionally, for progress driven events such\n * as animations, the `onProgressChangeInside` event can be utilized.\n *\n * Usage:\n * ```typescript\n * const element = document.getElementById('section-1')\n * const hook = new Hook(\n *     element,\n *     (progress) => {\n *         // Progress changed\n *     },\n *     () => {\n *         // On enter\n *     },\n *     () => {\n *         // On leave\n *     }\n * )\n * hook.attach()\n * ```\n */\nabstract class Hook {\n    element: HTMLElement\n\n    onEnter: () => void\n    onProgressChangeInside: (progress: Progress) => void\n    onLeave: () => void\n\n    progress?: Progress\n    isAttached: boolean\n\n    public constructor(\n        element: HTMLElement,\n        onEnter: () => void,\n        onProgressChangeInside: (progress: Progress) => void,\n        onLeave: () => void,\n    ) {\n        this.element = element\n\n        this.onEnter = onEnter\n        this.onProgressChangeInside = onProgressChangeInside\n        this.onLeave = onLeave\n\n        this.progress = undefined\n        this.isAttached = false\n    }\n\n    abstract calculateProgress(): Progress\n\n    /**\n     * Update the hook based on the current element position\n     * and dispatch the onEnter or the onLeave event accordingly.\n     */\n    private updatePosition(): void {\n        const newProgress = this.calculateProgress()\n        if (this.progress === undefined) {\n            if (newProgress.isInside()) {\n                // The progress is set initially and\n                // the element is inside the viewport\n                this.onEnter()\n            }\n        } else {\n            if (this.progress!.isInside() && !newProgress.isInside()) {\n                // The progress did change and the element\n                // left the viewport\n                this.onLeave()\n            }\n            if (!this.progress!.isInside() && newProgress.isInside()) {\n                // The progress did change and the element\n                // entered the viewport\n                this.onEnter()\n            }\n        }\n        if (newProgress.isInside()) {\n            this.onProgressChangeInside(newProgress)\n        }\n        this.progress = newProgress\n    }\n\n    /**\n     * Attach the hook to the document and window events.\n     */\n    public attach(): void {\n        if(this.isAttached) return\n        document.addEventListener(\n            'scroll', this.updatePosition.bind(this), true\n        )\n        window.addEventListener(\n            'resize', this.updatePosition.bind(this), true\n        )\n        this.isAttached = true\n    }\n\n    /**\n     * Detach the hook from the document and window events.\n     */\n    public detach(): void {\n        if (!this.isAttached) return\n        document.removeEventListener(\n            'scroll', this.updatePosition.bind(this), true\n        )\n        window.removeEventListener(\n            'resize', this.updatePosition.bind(this), true\n        )\n        this.isAttached = false\n    }\n}\n\n\n/**\n * A hook which starts at the top of the element and\n * ends at the bottom of the element.\n */\nexport class SectionHook extends Hook {\n    public calculateProgress(): Progress {\n        const scrollTop = window.scrollY\n        const elementHeight = this.element.offsetHeight\n        const elementTop = this.element.getBoundingClientRect().top + scrollTop\n        const windowHeight = window.innerHeight\n        const offsetScrollTop = scrollTop + windowHeight\n        const progressValue =\n            (offsetScrollTop - elementTop) / elementHeight\n        return new Progress(progressValue)\n    }\n}\n\n(window as any).SectionHook = SectionHook\n\n\n/**\n * A hook which starts at the top of the element and\n * ends at the bottom of the element, offset by the\n * viewport height for parallax effects\n */\nexport class ParallaxHook extends Hook {\n    public calculateProgress(): Progress {\n        const scrollTop = window.scrollY\n        const elementHeight = this.element.offsetHeight\n        const elementTop = this.element.getBoundingClientRect().top + scrollTop\n        const windowHeight = window.innerHeight\n        const offsetScrollTop = scrollTop + windowHeight\n        const progressValue =\n            (offsetScrollTop - elementTop) / (elementHeight + windowHeight)\n        return new Progress(progressValue)\n    }\n}\n\n(window as any).ParallaxHook = ParallaxHook\n","/**\n * Author: Philipp Matthes\n *\n * This module is used to apply scroll hooks.\n */\n\nimport { SectionHook } from './hook'\n\n\ndocument.addEventListener('DOMContentLoaded', async () => {\n    const bottomNavigation = <HTMLDivElement> document\n        .getElementById('bottom-navigation')\n    const navbarElements = bottomNavigation\n        .querySelectorAll<HTMLAnchorElement>('a.hook')\n    navbarElements.forEach((navbarElement) => {\n        const referredId = navbarElement.getAttribute('data-hook-id')\n        const referredElement = document.getElementById(referredId)\n        new SectionHook(\n            referredElement,\n            () => {\n                navbarElement.classList.add('active')\n            },\n            () => {},\n            () => {\n                navbarElement.classList.remove('active')\n            }\n        ).attach()\n    })\n})\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => Object.prototype.hasOwnProperty.call(obj, prop)","// startup\n// Load entry module\n__webpack_require__(223);\n// This entry module is referenced by other modules so it can't be inlined\n__webpack_require__(523);\n"],"sourceRoot":""}