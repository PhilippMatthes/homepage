document.addEventListener("DOMContentLoaded",(function(e){function t(){var e=document.getElementById("profile-icon-preview"),t=document.getElementById("profile-icon-webgl"),n=new THREE.PerspectiveCamera(45,t.clientWidth/t.clientHeight,1,1e3);n.position.z=200;var i=new THREE.WebGLRenderer({antialias:!0,alpha:!0});i.setSize(t.clientWidth,t.clientHeight),t.prepend(i.domElement);var o=(new THREE.TextureLoader).load("/static/img/ausschnitt.webp",(function(){c()})),a=(new THREE.TextureLoader).load("/static/img/ausschnitt-depth.webp",(function(){c()})),r=new THREE.ShaderMaterial({uniforms:{mouseX:{value:0},mouseY:{value:0},scrollOffset:{value:0},texture:{value:o},depthTexture:{value:a}},vertexShader:"\n            varying vec2 vUv;\n            void main()\t{\n                vUv = uv;\n                gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);\n            }\n        ",fragmentShader:"\n            #extension GL_OES_standard_derivatives : enable\n            varying vec2 vUv;\n            uniform float mouseX;\n            uniform float mouseY;\n            uniform float scrollOffset;\n            uniform sampler2D depthTexture;\n            uniform sampler2D texture;\n            void main() {\n                vec2 vMouse = vec2(mouseX, mouseY);\n                vec2 vScrollOffset = vec2(0, scrollOffset);\n                float depth = texture2D(depthTexture, vUv).r;\n                gl_FragColor = texture2D(texture, vUv + vMouse * (depth) + vScrollOffset);\n                // Do some edge anti aliasing, because the image contains\n                // a premultiplied alpha channel\n                gl_FragColor.rgb = gl_FragColor.rgb * gl_FragColor.a;\n            }\n        "}),l=new THREE.Scene,d=new THREE.PlaneBufferGeometry(1,1),s=new THREE.Mesh(d,r);function u(e){var o=t.getBoundingClientRect(),a=Math.max(-500,Math.min(500,e.clientX-o.left)),d=Math.max(-500,Math.min(500,e.clientY-o.top));r.uniforms.mouseX.value=-a/15e3,r.uniforms.mouseY.value=d/15e3,t.style.transform="rotate3d(0, 1, 1, "+a/50+"deg)",window.requestAnimationFrame((function(){i.render(l,n)}))}function c(){n.aspect=t.clientWidth/t.clientHeight,n.updateProjectionMatrix();var e=THREE.Math.degToRad(n.fov),o=2*Math.tan(e/2)*n.position.z,a=o,r=1*o;s.scale.set(r,a,1),i.setSize(t.clientWidth,t.clientHeight),window.requestAnimationFrame((function(){i.render(l,n)}))}function m(){document.documentElement.clientWidth<1023?(t.style.display="none",e.style.display="block",window.removeEventListener("resize",c,!0),document.removeEventListener("mousemove",u,!0)):(e.style.display="none",t.style.display="block",c(),window.addEventListener("resize",c,!0),document.addEventListener("mousemove",u,!0))}l.add(s),m(),window.addEventListener("resize",m,!1)}var n=!1;function i(){if(!(document.documentElement.clientWidth<1023||n)){var e=document.createElement("script");e.setAttribute("src","/static/vendor/js/three.min.js"),e.onload=t,document.body.appendChild(e),n=!0}}i(),window.addEventListener("resize",i,!1)}));
//# sourceMappingURL=header.min.js.map